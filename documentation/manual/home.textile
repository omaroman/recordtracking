h1. RecordTracking module for Play!

h2. What is RecordTracking?

RecordTracking unobtrusively tracks the *creation*, *updating* and *elimination* events regarding to records.
When one of those events occurs, writes into a log:
-   The name of the action
-   The date when the action was invoked
-   The user who invoked the event
-   The name of the model
-   The model data including association id's

h2. Configuration

Set the following properties in conf/application.conf

bc. recordtracking.sessionKey=username

This propoerty is for obtaining the *User* from the session cookie.

p(note). If the application doesn't use sessions, then *user* name is recorded as <code>==_UNKNOWN_==</code>

p(note). If any data is loaded via yaml, then *user* name is recorded as <code>==_YAML_==</code>

h2. Logs

RecordTracking uses log4j in order to write data wherever you want, as long as you know how to manipulate log4j.

By default, appender and loggers must be configured in log4j.xml or log4j.properties.
RecordTracking first tries to read the xml file, if it doesn't exist, then tries to read the properties file.
The logger for this module must be named *recordtracking*

h2. Usage

- Add this module to your dependecy.yml file
- Configure log4j

h3. @NoTracking

If you don't want a model data be tracked at all, then annotate such model with @NoTracking

bc. @Entity
@NoTracking
public class MyModel extends Model {
    ...
}

h3. @Mask

If you want to mask a field's value, then annotate such field with @Mask

bc. @Entity
public class Woman extends Model {
    @Mask
    public Integer age;
}

Every single character of the value will be replaced by an _*_ character

h3. Overwriting _formatRecordTracking_ method

By default, the data model is formatted as follows:

- The string: -----[BEGIN]-----
- The event name
- The event date
- The user who triggered the event
- An empty line
- The model name
- The fields (preceded by @) and its values, including associations id's
- The string: -----[ END ]-----

E.g.,

<pre>
-----[BEGIN]-----
POST REMOVE
Thu Nov 24 11:02:20 CST 2011
User: elbarto

<models.Quote>
@author_id:3
@quotation:Never more
@id:3
-----[ END ]-----

-----[BEGIN]-----
POST REMOVE
Thu Nov 24 11:02:20 CST 2011
User: elbarto

<models.Author>
@last_name:Poe
@quotes_ids:1 2 3
@id:1
@first_name:Alan
@years:***
-----[ END ]-----
</pre>

If you want another format for a particular model, then write your own _formatRecordTracking_

E.g.,

bc. @Entity
public class Author extends Model {
Custom formatRecordTracking method
    public String formatRecordTracking(String event) {
        return String.format("%nevent%n%s%n", "YOU WILL KNOW NOTHING FROM ME, :p");
    }
}

h2. How it works

It enhances via bytecode all persistent models.

A transient field is injected:

@Transient Map track_data;

The following methods are injected:

* @PostPersit onPostPersist()
* @PreRemove onPreRemove()
* @PostRemove onPostRemove()
* @PreUpdate onPreUpdate()
* @PostUpdate onPostUpdate()
* formatRecordTracking(String event)
* _fill_track_data()

If there's already a method annotated with @PostPersist, @PreRemove, @PostRemove, @PreUpdate, @PostUpdate, then
then the logic is just inserted at the beginning of the annotated method, depending on the case.

When a PRE-Event is triggered the data to be record is stored into a transient Map (_track_data_), afterwards when
a POST-Event is triggered the _formatRecordTracking_ method is invoked which in turns invokes log4j so that the data is being recorded.

h2. Limitations

h3. play.db.jpa.Model

This initial version only works with models that inherit from play.db.jpa.Model.
If any of the models inherits far beyond from JPABase -> GenericModel -> Model, then RecordTracking won't know where to get the association id's.

h3. Association annotations and FetchType

With the @OneToOne, @OneToMany and @ManyToOne annotations, JPA by default assigns EAGER FetchType, if you change this behavior to LAZY
the module won't be able to delete the Object which owns the association.

I'm not very good at JPA and I don't know why this behavior happen.
*_If any one knows I'd really appreciate the collaboration._*

h2. Sample application

One sample demo is part of the distribution, there are log4j.xml and log4j.properties files included.
Don't forget to run _play deps_ so that it resolves dependencies.

h2. Play-Utilities

This module uses a small API: play "utilities":https://github.com/omaroman/utilities

h2. TODO

* Improve the module in order to work with models that inherit from GenericModel, i.e., find the fields annotated with @Id

* Write into a single block all chained events triggered by a cascade event.

I tried to achieve the same functionality by events callback, but I have to modify two classes of the play framework.

Commit improvements to the Play Framework Core.
* PlayPlugin
** Add a preEvent() method
* JPABase
** _save() -> invoke: PlayPlugin.preEvent("JPASupport.objectPrePersisted", this);
** _delete() -> invoke: PlayPlugin.preEvent("JPASupport.objectPreDeleted", this);

h2. Credits

Author: Omar O. Rom√°n
